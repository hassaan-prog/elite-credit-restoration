{"version":3,"sources":["logo.svg","components/inputField.jsx","components/button.jsx","components/login.jsx","components/inputFile.jsx","components/client/client-create.jsx","components/client/client-list.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputField","label","type","name","required","className","autoComplete","Button","redirectFunction","text","class","id","onClick","Login","window","location","href","role","InputFile","Inventory","ClientList","App","path","exact","component","ClientCreate","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3131eee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst InputField = ({ label, type = \"text\", name, required = false }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <input type={type} name={name} autoComplete=\"off\" required={required} />\r\n            <span>{label}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InputField;","import React from 'react';\r\n\r\nconst Button = ({redirectFunction, text}) => {\r\n    return (\r\n        <div class=\"form-group\">\r\n            <button id=\"submit\" onClick={redirectFunction} type=\"button\"> <strong>{text}<b></b> <i></i></strong> </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport InputField from './inputField';\r\nimport Button from './button';\r\n\r\nconst Login = () => {\r\n    const redirectToClientList = () => {\r\n       window.location.href = '/client-list';\r\n    }\r\n    return (\r\n      <div className=\"contact-form\">\r\n        <h5>Login</h5>\r\n        <form id=\"contact\">\r\n          <InputField name=\"email\" label=\"Your E-Mail\" />\r\n          <InputField name=\"password\" label=\"Password\" />\r\n                <Button redirectFunction={redirectToClientList} text=\"Submit\"/>\r\n        </form>\r\n        <div className=\"form-group\">\r\n          <div\r\n            id=\"success\"\r\n            className=\"alert alert-success wow fadeInUp\"\r\n            role=\"alert\"\r\n          >\r\n            {' '}\r\n            Your message was sent successfully! We will be in touch as soon as\r\n            we can.{' '}\r\n          </div>\r\n\r\n          <div\r\n            id=\"error\"\r\n            className=\"alert alert-danger wow fadeInUp\"\r\n            role=\"alert\"\r\n          >\r\n            {' '}\r\n            Something went wrong, try refreshing and submitting the form again.{' '}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nconst InputFile = ({label, name}) => {\r\n    return (\r\n        <div class=\"form-group\">\r\n            <label>{label}</label>\r\n            <input type=\"file\" name={name}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InputFile;","import React from 'react';\r\nimport InputField from '../inputField';\r\nimport InputFile from '../inputFile';\r\nimport Button from '../button';\r\n\r\nconst Inventory = () => {\r\n  const takeBackToList = () => {\r\n    window.location.href = '/client-list';\r\n  }\r\n    return (\r\n      <div className=\"contact-form\">\r\n        <h5>Client Info</h5>\r\n        <form id=\"contact\">\r\n          <InputField name=\"name\" label=\"Full Name\" />\r\n          <InputField name=\"email\" label=\"Your E-Mail\" />\r\n          <InputField name=\"phone\" label=\"Phone No\" />\r\n          <InputField name=\"dateOfBirth\" label=\"Date of Birth\" />\r\n          <InputField name=\"ssnCard\" label=\"SSN Card Number\" />\r\n          <InputFile label=\"SSN Card Picture\" name=\"ssnCardPicture\" />\r\n          <InputFile label=\"Proof of Address\" name=\"proofOfAddress\" />\r\n          <InputFile label=\"National ID\" name=\"nationalId\" />\r\n          <InputFile label=\"Documents\" name=\"documents\" />\r\n          <Button text=\"Submit\" redirectFunction={takeBackToList} />\r\n        </form>\r\n        <div className=\"form-group\">\r\n          <div\r\n            id=\"success\"\r\n            className=\"alert alert-success wow fadeInUp\"\r\n            role=\"alert\"\r\n          >\r\n            {' '}\r\n            Your message was sent successfully! We will be in touch as soon as\r\n            we can.{' '}\r\n          </div>\r\n\r\n          <div\r\n            id=\"error\"\r\n            className=\"alert alert-danger wow fadeInUp\"\r\n            role=\"alert\"\r\n          >\r\n            {' '}\r\n            Something went wrong, try refreshing and submitting the form again.{' '}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Inventory;","import React from 'react';\r\nimport Button from '../button';\r\n\r\nconst ClientList = () => {\r\n    const redirectToCreateClient = () => {\r\n       window.location.href = '/client-add';\r\n    }\r\n    return (\r\n        <div>\r\n            <Button redirectFunction={redirectToCreateClient} text=\"Add Client\" />\r\n            <h2>Client List</h2>\r\n           <table class=\"table table-hover\" id=\"dev-table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>&nbsp;</th>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Package</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>1</td>\r\n                    <td>Kilgore</td>\r\n                    <td>Kilgore@gmail.com</td>\r\n                    <td>+923453458634</td>\r\n                    <td>kilgore</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>Bob</td>\r\n                    <td>Bob@gmail.com</td>\r\n                    <td>03232323232</td>\r\n                    <td>boblahblah</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>3</td>\r\n                    <td>Holden</td>\r\n                    <td>Holden@yahoo.com</td>\r\n                    <td>03131313131</td>\r\n                    <td>penceyreject</td>\r\n                </tr>\r\n                </tbody>\r\n            </table> \r\n        </div>\r\n      \r\n    );\r\n};\r\n \r\nexport default ClientList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/login.jsx';\nimport ClientCreate from './components/client/client-create';\nimport ClientList from './components/client/client-list';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"contact submit-file\">\n        <div className=\"container\">\n          <div className=\"row\"> \n            <div className=\"col-lg-7 wow fadeInUp\">\n              <Switch>\n                  <Route path=\"/\" exact component={Login}/>\n                  <Route path=\"/client-add\" exact component={ClientCreate}/>\n                  <Route path=\"/client-list\" exact component={ClientList}/>\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}